-- title:  Vase
-- author: verysoftwares
-- desc:   tile-based collectathon
-- script: lua

t=0
x=2
y=7
pi=math.pi
sin=math.sin
cos=math.cos
ins=table.insert
rem=table.remove
fmt=string.format
sub=string.sub

inventory={}

hidden={}

function inv_len()
		local i=1
		while fget(mget(x,y-i),2) do
				i=i+1
		end
		return i-1
end

function inv_rem()
		local i=1
		while fget(mget(x,y-i),2) do
				mset(x,y-i,mget(x,y-i-1))
				i=i+1
		end
		mset(x,y-i,0)
end

function move(dx)
		if can_pickup(dx) then
				if dx<0 then plrflip=1 else plrflip=0 end
				--ins(inventory,{sp=mget(x-1,y)})
				local oldy=y-inv_len()-1
				local old=mget(x,oldy)
				mset(x,y-inv_len()-1,mget(x+dx,y))
				mset(x+dx,y,0)

				local i=1
				local ir=false
				local snd=false
				while fget(mget(x,y-i),2) do
						if y-i==oldy and fget(old,3) then
								hidden[posstr(x,y-i)]={id=old,t=t}
								if mget(x,y-i)==gates[posstr(x,y-i)].id and gates[posstr(x,y-i)].count>0 then
										ir=true
										gates[posstr(x,y-i)].count=gates[posstr(x,y-i)].count-1
										sfx(2,'E-4',30,2)
										snd=true
								end
						end
						i=i+1
				end

				if ir then inv_rem() end

				reveal_hidden()

				if not snd then sfx(1,'E-4',22,2) end
		elseif can_move(dx) then
				if dx<0 then plrflip=1 else plrflip=0 end
				
				local snd=false
				-- move inventory
				local i=1
				local ir=false
				while fget(mget(x,y-i),2) do
						if fget(mget(x+dx,y-i),3) then
								--hidden[posstr(x+dx,y-i)]={id=mget(x+dx,y-i),t=t}
								if mget(x,y-i)==gates[posstr(x+dx,y-i)].id and gates[posstr(x+dx,y-i)].count>0 then
										ir=true
										gates[posstr(x+dx,y-i)].count=gates[posstr(x+dx,y-i)].count-1
										local connect=gates[posstr(x+dx,y-i)].connect
										if connect then
										gates[connect].count=gates[connect].count-1
										end
										sfx(2,'E-4',30,2)
										snd=true
								end
						end
						if mget(x+dx,y-i)>0 then
								hidden[posstr(x+dx,y-i)]={id=mget(x+dx,y-i),t=t}
						end
						mset(x+dx,y-i,mget(x,y-i))
						mset(x,y-i,0)
						i=i+1
				end

				x=x+dx
				if ir then inv_rem() end
				
				if not snd then sfx(0,'E-1',6,2) end
				if not fget(mget(x,y+1),1) then fall() end

				reveal_hidden()
		end 	
end

function reveal_hidden()
		for k,h in pairs(hidden) do
				local hx,hy=strpos(k)
				if (h.t~=t or y-inv_len()>hy) and (not fget(mget(hx,hy),2) or (mget(hx,hy)==33 and hx~=x)) then
				mset(hx,hy,h.id)
				hidden[k]=nil
				end
		end
end

function transition()
		local clear=true
		for i,r in ipairs(rooms) do
				if r.tx then 
						clear=false
						if r.tx<r.x then
						r.x=r.x-3
						if r.x<=r.tx then r.x=r.tx; r.tx=nil end
						end
				end
		end

		cls(0)
		for i,r in ipairs(rooms) do if r.visited then
		rectb(r.x-4,r.y-4,r.mw*8+2*4,r.mh*8+2*4,5)
		rect(r.x,r.y,r.mw*8,r.mh*8,r.c)
		map(r.mx,r.my,r.mw,r.mh,r.x,r.y,0,1,remap)
		end end
	
		if clear then 
		cur_room=rooms[2]
		--gates[posstr(8,3)].count=0
		hidden[posstr(8,3)]={id=12,t=t}
		mset(6,6,12)
		x=8; y=3
		TIC=update 
		end
	
		t=t+1
end

function fall()
		local i=1
		while fget(mget(x,y-i),2) do
				mset(x,y-i+1,mget(x,y-i))
				i=i+1
		end
		if fget(mget(x,y-i+1),2) then mset(x,y-i+1,0) end
		y=y+1

		reveal_hidden()
end

function update()

	local oldx,oldy=x,y
	if btnp(0) and can_jump() then 
			local i=inv_len()
			while fget(mget(x,y-i),2) do
					if mget(x,y-i-1)>0 and not fget(mget(x,y-i-1),2) then
							hidden[posstr(x,y-i-1)]={id=mget(x,y-i-1),t=t}
					end
					if mget(x,y-i-1)~=33 then
					mset(x,y-i-1,mget(x,y-i))
					end
					i=i-1
			end
			--mset(x,y-i,0)
			y=y-1
			local snd=false
			if gates[posstr(x,y-inv_len())] and gates[posstr(x,y-inv_len())].count>0 then
						gates[posstr(x,y-inv_len())].count=gates[posstr(x,y-inv_len())].count-1
						local connect=gates[posstr(x,y-inv_len())].connect
						if connect then
						gates[connect].count=gates[connect].count-1
						end
						sfx(2,'E-4',30,2)
						snd=true
						inv_rem()
			end
			if not snd then sfx(9,'E-5',22,2) end
			
			reveal_hidden()
			
			if gates[posstr(x,y)] and gates[posstr(x,y)].count==0 then 
					if x==6 and y==6 then
					rooms[1].tx=rooms[1].x-8*rooms[2].mw+64-12-6-10
					rooms[2].x=240
					rooms[2].visited=true
					rooms[2].tx=240-rooms[2].mw*8-64+24+6-10
					end
					TIC=transition
					sfx(7,'E-5',70,2) 
					if mget(oldx,oldy)==33 then mset(oldx,oldy,0) end
					mset(x,y,33)
					TIC(); return
			end
	end
	if btnp(1) and can_fall() then
			fall()
			sfx(8,'E-5',16,2)
	end
	if btnp(2) then move(-1) end
	if btnp(3) then move(1)  end
	if mget(oldx,oldy)==33 then mset(oldx,oldy,0) end
	mset(x,y,33)
	if btnp(4) and can_drop() then
			local dx=1
			if plrflip==1 then dx=-1 end
			local sp=mget(x,y-1)
			inv_rem()
			mset(x+dx,y,sp)
			sfx(10,'E-1',22,2)
	end
	if btnp(5) and can_reclaim() then
			local g=posstr(x,y)
			gates[g].count=gates[g].count+1
			local connect=gates[g].connect
			if connect then
			gates[connect].count=gates[connect].count+1
			end
			
			if fget(mget(x,y-inv_len()-1),1) or (y-inv_len()-1<cur_room.my) then
					if not fget(mget(x,y+1),1) then
							local i=1 
							while fget(mget(x,y-i),2) do
									mset(x,y-i+1,mget(x,y-i))
									i=i+1
							end
							mset(x,y-i+1,0)
							y=y+1
					end
			end

			mset(x,y-inv_len()-1,gates[g].id)
			sfx(11,'E-4',43,2)
	end

	if btnp(4) then zt=t; st=t end

	if not zt then
	cls(t*0.06)
	print("HELLO WORLD!",0,0,(t-16)*0.06%16)
	else
	cls(zt*0.06)
	print("HELLO WORLD!",0,0,(zt-16)*0.06%16)
	local j=0
	for i=math.max(0,(t-st-128)*0.25),(t-st)*0.25 do
	for c=0,4-1 do
	local a=j*2+t*0.08+c*2*pi/4
	local a2=j*2+t*0.08+(c+1)*2*pi/4
	line(x+cos(a)*(i+1)*3,y+sin(a)*(i+1)*3,x+cos(a2)*(i+1)*3,y+sin(a2)*(i+1)*3,(zt-16)*0.06%16)
	end
	j=j+1
	end	
	end

	cls(0)
	for i,r in ipairs(rooms) do if r.visited then
	rectb(r.x-4,r.y-4,r.mw*8+2*4,r.mh*8+2*4,5)
	rect(r.x,r.y,r.mw*8,r.mh*8,r.c)
	map(r.mx,r.my,r.mw,r.mh,r.x,r.y,0,1,remap)
	end end

	local sortgates={}
	for k,g in pairs(gates) do
			local gx,gy=strpos(k)
			if gx>=cur_room.mx and gx<cur_room.mx+cur_room.mw and gy>=cur_room.my and gy<cur_room.my+cur_room.mh then
					ins(sortgates,g)
					g.x=gx; g.y=gy
			end
	end
	ins(sortgates,{x=x,y=y,count=-1})
	table.sort(sortgates,function(a,b) return a.y<b.y or (a.y==b.y and a.x>b.x) end)
	local l,r=0,0
	for i,g in ipairs(sortgates) do
			local gx,gy=g.x,g.y
			local bx,by
			local tw=print(fmt('%dx',g.count),0,-6,12)
			if gx<0 then bx=cur_room.x-tw-8-8; by=cur_room.y+l+3; l=l+16; line(cur_room.x+(gx-cur_room.mx)*8+4,cur_room.y+(gy-cur_room.my)*8+4,bx-2+tw+12-1,by-4+6,12)
			else bx=cur_room.x+cur_room.mw*8+8; by=cur_room.y+r+3; if cur_room==rooms[2] then by=by-12 end; r=r+16; line(cur_room.x+(gx-cur_room.mx)*8+4,cur_room.y+(gy-cur_room.my)*8+4,bx-2,by-4+6,12) end
			local bx2=bx-2
			local bw=tw+12-1-1
			if g.count==0 then bw=bw+1 end
			local bh=16-3
			if g.count==-1 then
			local tw2=0
			for j,v in ipairs(avail_actions()) do
					local oy=0
					if v.id>=53 and v.id<=56 then oy=-1 end
					spr(v.id,bx2+2,by+2-4+(j-1)*10+oy,0)
					local tw3=print(v[1],bx2+2+8+1,by+2+(j-1)*10-3,12,false,1,true)
					if v[1]=='Get' or v[1]=='Drop' then
							local oy2=0
							if v.sp==11 then oy2=-1 end
							spr(v.sp,bx2+2+8+1+tw3,by+2-4+(j-1)*10+oy2,0)
							tw3=tw3+8
					end
					if tw3>tw2 then tw2=tw3 end
					if j>1 then bh=bh+10 end
			end
			bw=8+tw2+4
			bh=bh-1
			end
			r=r+bh-(16-3)
			if g.count==0 then bw=bw+4; if gx<0 then bx2=bx2-4 end end
			rectb(bx2,by-4,bw,bh,12)
			if g.count>0 then
			print(fmt('%dx',g.count),bx,by,12)
			local oy=0
			if g.id~=11 then oy=1 end
			spr(g.id,bx+tw-1,by-3+oy,0)
			elseif g.count==0 then
			print('OPEN',bx2+2,by,12)
			end
	end
	
	spr(33,cur_room.x+(x-cur_room.mx)*8,cur_room.y+(y-cur_room.my)*8,0,1,plrflip)
	
	local tw=print('"Hello world."',0,-6,12,false,1,true)
	print('"Hello world."',cur_room.x+cur_room.mw*8/2-tw/2,cur_room.y+cur_room.mh*8+8,12,false,1,true)
	
	t=t+1
end

rooms={
{mx=0,my=4,mw=7,mh=17-4,x=240/2-7*8/2,y=136/2-(17-4)*8/2,c=15,visited=true},
{mx=7,my=1,mw=22-7+1,mh=10-1,x=240/2-10*8/2,y=136/2-(17-4)*8/2,c=15,visited=false},
}
cur_room=rooms[1]
gates={
['6:6']={id=11,count=3,connect='8:3'},
['8:3']={id=11,count=3,connect='6:6'},
['14:1']={id=11,count=6},
['21:3']={id=11,count=3},
['13:7']={id=44,count=1},
['16:7']={id=11,count=1},
}
for k,g in pairs(gates) do
		g.maxcount=g.count
end

-- you give this the numbers 0 and 1, it will return a string '0:1'.
-- table keys use this format consistently. 
    function posstr(x,y)
        return fmt('%d:%d',x,y)
    end

-- you give this the string '0:1', it will return 0 and 1. 
    function strpos(pos)
        local delim=string.find(pos,':')
        local x=sub(pos,1,delim-1)
        local y=sub(pos,delim+1)
        --important tonumber calls
        --Lua will handle a string+number addition until it doesn't
        return tonumber(x),tonumber(y)
    end

function remap(tile,x,y)
		local flip=0
		if tile==12 then tile=12+t*(0.2)%4 end
		if tile==33 and plrflip then flip=plrflip end
		return tile,flip,0
end

function avail_actions()
		local avail={}

		if can_move(-1) then ins(avail,{'Move',id=52})
		elseif can_pickup(-1) then ins(avail,{'Get',id=52,sp=mget(x-1,y)}) end
		if can_move(1) then ins(avail,{'Move',id=50}) 
		elseif can_pickup(1) then ins(avail,{'Get',id=50,sp=mget(x+1,y)}) end
		if can_jump() then ins(avail,{'Jump',id=49}) end
		if can_fall() then ins(avail,{'Fall',id=51}) end
		if can_drop() then ins(avail,{'Drop',id=53,sp=mget(x,y-1)}) end
		if can_travel() then ins(avail,{'Travel',id=53}) end
		if can_reclaim() then ins(avail,{'Reclaim',id=54}) end
		
		return avail
end

function can_move(dx)
		if x+dx<cur_room.mx or x+dx>=cur_room.mx+cur_room.mw then return false end
		local i=0
		local falling=not fget(mget(x,y+1),1)
		while fget(mget(x,y-i),2) do
				if (not falling and fget(mget(x+dx,y-i),1)) and not (i==0 and falling and not fget(mget(x+dx,y-i+1),1)) then
						return false
				end
				if falling and i>0 then
						if fget(mget(x+dx,y-i+1),1) then return false end
				end
				i=i+1
		end
		return true
end

function can_pickup(dx)
		return fget(mget(x+dx,y),2) and not (fget(mget(x,y-inv_len()-1),1) or (y-inv_len()-1<cur_room.my))
end

function can_jump()
		if not fget(mget(x,y+1),1) then return false end
		if fget(mget(x,y-inv_len()-1),1) or (y-inv_len()-1<cur_room.my) then
				return false
		end
		return true
end

function can_fall()
		return not fget(mget(x,y+1),1)
end

function can_drop()
		if inv_len()==0 then return false end
		if not fget(mget(x,y+1),1) then return false end
		local dx=1
		if plrflip==1 then dx=-1 end
		if mget(x+dx,y)==0 and fget(mget(x+dx,y+1),1) then return true end
		return false
end

function can_travel()
		return hidden[posstr(x,y)] and hidden[posstr(x,y)].id==12 and gates[posstr(x,y)].count==0
end

function can_reclaim()
		if not (hidden[posstr(x,y)] and hidden[posstr(x,y)].id==12 and gates[posstr(x,y)].count<gates[posstr(x,y)].maxcount) then return false end
		if fget(mget(x,y-inv_len()-1),1) or (y-inv_len()-1<cur_room.my) then
				if not fget(mget(x,y+1),1) then
						return true
				end
				return false
		end
		return true
end

TIC=update
-- <TILES>
-- 001:eccccccccc888888caaaaaaaca888888cacccccccacc0ccccacc0ccccacc0ccc
-- 002:ccccceee8888cceeaaaa0cee888a0ceeccca0ccc0cca0c0c0cca0c0c0cca0c0c
-- 003:eccccccccc888888caaaaaaaca888888cacccccccacccccccacc0ccccacc0ccc
-- 004:ccccceee8888cceeaaaa0cee888a0ceeccca0cccccca0c0c0cca0c0c0cca0c0c
-- 005:7777777777bb227777baa277777b277777baa27777baa27777baa277777b2777
-- 006:7777777777bbbb7777b77b77777bb77777b77b7777b77b7777b77b77777bb777
-- 007:5555555555336655553556555553655555355655553556555535565555536555
-- 008:0000000000555500005005000005500000500500005005000050050000055000
-- 009:00000000000000000eeddff000dfff000eeffff00efffff000ffff00000ff000
-- 010:0000000000000000deeeeeedddffffdddfdffdfddffddffddffffffddeeeeeed
-- 011:0000000000000000065667700067770006577770067777700077770000077000
-- 012:5555555550000005500000055000000550000005500000055000000555555555
-- 013:5555555550000005500000055006600550066005500000055000000555555555
-- 014:5555555550000005506666055060060550600605506666055000000555555555
-- 015:5555555556666665560000655600006556000065560000655666666555555555
-- 017:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
-- 018:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
-- 019:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
-- 020:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
-- 021:bbbbbbbab7777772b7777772b7777772b7777772b7777772b7777772a2222222
-- 022:bbbbbbbbb7bbbbbbbb777bbbbb77b7bbbb7b77bbbbb777bbbbbbbb7bbbbbbbbb
-- 025:eeeeeeefeffffff0effffff0eff00ef0eff00ef0effeeef0effffff0f0000000
-- 027:5555555656666667566666675667756756677567566555675666666767777777
-- 028:0067000000567000000076000007650000670000005670000000760000076500
-- 029:0076556006556000755700006576700056076700500076706000076700000076
-- 030:0077777700777777000566600006566006566666666566667666667707777770
-- 033:00000c00dc000c00c0000cc0c0000c2dcddccccc0dccccd00cc00dd00c0000d0
-- 034:00000c00cc000c00c0000cc0c0000c2ccccccccc0cccccc00cc00cc00c0000c0
-- 035:00000c00cc000c00c0000cc0c0000c2ccccccccc0cccccc00cc00cc00c0000c0
-- 036:00000c00cc000c00c0000cc0c0000c2ccccccccc0cccccc00cc00cc00c0000c0
-- 037:7777777777777777777777777777777777777777777777777777777777777777
-- 038:7777777777777777777777777777777777777777777777777777777777777777
-- 043:6666666767777770677777706770067067700670677666706777777070000000
-- 044:0067000000667000000076000007660000670000006670000000760000076600
-- 045:0000000000000000555555555577776657577676577667765777777656666666
-- 049:000cc00000ceec000ceddec0ceddddeccccddccc00cddc0000cddc00000cc000
-- 050:000cc000000cec000ccceec0ceeeddecceddddec0cccddc0000cdc00000cc000
-- 051:000cc00000ceec0000cddc00cccddcccceeddeec0cddddc000cddc00000cc000
-- 052:000cc00000cec0000ceeccc0ceddeeecceddddec0cddccc000cdc000000cc000
-- 053:000000000cccccc00ceeeec00ccccdc00cceedc00cedccc00cddeec00cccccc0
-- 054:000000000cccccc00ceccec00cdccdc00cceecc00ceccec00cdccdc00cccccc0
-- 055:000000000cccccc00cceecc00ceccec00cdeedc00cdccdc00cdccdc00cccccc0
-- 056:000000000cccccc00cceeec00cedccc00cceecc00cccdec00ceeecc00cccccc0
-- 061:0000000000655556655555775555677766667777666677776666777066667700
-- 065:00022000002222d002dd2dd02ddd2222022222d2000cc22000dcc00000ccc000
-- 066:00055000005555d005dd5dd05ddd5555055555d5000cc55000dcc00000ccc000
-- </TILES>

-- <MAP>
-- 001:0000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:0000000000000000c00000b00000b0b00000b00000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:00000000000000000000b2b1b2b1b2b1b2b1b2b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:0000000000000000b1b2b1b2b1b2b1b2b1b2b1b2b1b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:000000000000c0000000c2c2b2b1b2b1b200c2c2c20000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:00b01200b0b000000000c2c200c0b1b2c000c2c2c2000000b0b00000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:b2b1b2b1b2b1b200000000c20000b2b1000000c2c20000b1b2b1b2b1b2b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:b1b2b1b2b1b2b1000000000000b2b1b2b10000c2000000b2b1b2b1b2b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:b2b1b2b1b2b1b2000000000000b1b2b1b20000c2000000b1b2b1b2b1b2b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:b1b2b1b2b1b2b1000000000000b2b1b2b10000c2000000b2b1b2b1b2b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:b2b1b2b1b2b1b2000000000000b1b2b1b20000c2000000b1b2b1b2b1b2b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:b1b2b1b2b1b2b1000000000000c2b1b2c20000c2000000b2b1b2b1b2b1b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:00b1b2b1b2b100000000000000c2b2b1c20000c200000000b2b1b2b1b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:00c2c200c2000000000000000000b1b2000000c20000000000c200c2c200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:0000c200000000000000000000b1b2b1b20000c200000000000000c20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:32000023cdffffdc32000023cdffffdc
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 003:356789bcdcacdeedca87543322222345
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000
-- 001:009000d000f000f000a00070004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- 002:009000d000f000f000a00070004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000384000000700
-- 003:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100304000000000
-- 004:030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300500000000000
-- 005:04001400140034004400640074008400a400b400c400d400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400404000000000
-- 006:00b000d000f000d000b00070009000b00090007000300050007000500030003000500070005000300030003000300030003000300030003000300030357000000000
-- 007:000c000a0008000800080008000a000f0007000700000000000700070000000000070007000000000000000000000000000000000000000000000000c64000000000
-- 008:0000000f000d000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008c04000000000
-- 009:000800080008000800080008000a000f0007000700070007000700070007000700070007000700070007000700070007000700070007000700070007c04000000000
-- 010:000000000000000000000007000700070007000700000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000
-- 011:009000df00fe00fd00ac007b004a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4000000707
-- </SFX>

-- <PATTERNS>
-- 000:600048000000100000600048110300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:800048000000900048000000000000000000b00048000000000000000000d00048000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:000000000000d00036000000100000000000d00036000000100000000000d00036000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:60005800000060005a00000060005a00000060005600000060005800000060005a00000060005a00000000000000000000000000000000000000000060005a00000000000000000060005c00000000000000000060005a00000000000000000060005800000060005a00000060005a00000060005600000060005800000060005a00000060005a00000000000000000000000000000000000000000060005c000000000000000000600058000000000000000000000000000000000000000000
-- </PATTERNS>

-- <TRACKS>
-- 000:1000002c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410000
-- 001:000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </TRACKS>

-- <FLAGS>

-- </FLAGS>

-- <PALETTE>
-- 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
-- </PALETTE>

